
from reportlab.lib.utils import ImageReader
from reportlab.pdfgen.canvas import Canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.pdfmetrics import registerFont
from reportlab.lib.pagesizes import A4

# henry.smith@ukaea.uk


import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import matplotlib.axes as axes
import matplotlib.patches as patches
import numpy as np
import glob
import os
import datetime



#defines
filefolder = 'N:/CCFE/H3AT/TritiumScience/Tritium Research/Tricem/Data/Science/ScienceRun3-D2/' #write the filepath
filepath = ''.join([filefolder,'S87\*']) # ** is a "wildcard", so it goes through every folder in the sciencerun3-d2 directory 
outputfolder = 'N:\CCFE\H3AT\TritiumScience\Tritium Research\Tricem\Data\Science\ScienceRun3-D2\output'
smoothfactor =3 # smoothing factor for any averaging we do on the graph (there's none atm)

colours = ("Yellow", "Green", "Blue", "Red", "Orange", "lightgreen", "navy", "Teal",
           "purple", "salmon", "darkgoldenrod", "lightseagreen", "darkolivegreen", "saddlebrown", "cornflowerblue",
          "fuchsia", "grey", "darkslategray", "black", "royalblue", "rosybrown", "mediumseagreen") #will cycle through this index colouring each new graph in a new colour


### defines for daq
daqXcolumn = 0 			#UNUSED. seems we increments seconds by 1s each timestep, so range() will work
daqtimestep =1
daqYcolumns = [2,3,4,5] 	#all columns in each sheet of the doc that contain Y data
skipchannel = 1 #the header can sometimes be misaligned because pandas automatically throws away row 1 if there are more columns than headers
daqheaderrow = 7 				#row of the header (i.e the column titles)

### defines for diode
diodeXcolumn = 0 			#only column in each sheet of the doc that contains the x data. This is the sample data column, giving us Time in Seconds
diodeYcolumn = 1 # columnthat contains Y data
diodeheaderrow = 0 				#row of the header (i.e the column titles)
sp = '\t' # column separator for diode files. may be ';'
diodefilename = "diode*.csv" #"optic*.csv" # name of files. use "diode*.csv"


### defines for r comparison
rXcolumn =0 # used for interpolation
rYcolumn =1 # used for interpolation
rheaderrow = 0
resistorohms = 3.7
searchrange = 5 # range of data that r interpolation will search. Set to about 2000000 to search from the start each time

r1areacm2 = 12.82 # used to calc coulombs, once i can load the sample size in automatically
sampleareacm2 = 10

r2areacm2=29.16#unused

### defines for pdf processor. p.s check derived defines for this
registerFont(TTFont('arial','C:\\windows\\fonts\\arial.ttf'))
img = ImageReader('N:\CCFE\H3AT\TritiumScience\Tritium Research\Tricem\Data\Science\Analysis\Macros\FinalLogo.jpg') #eurochem logo
cwidt = 590
cheigh = 785

#derived defines. change ** to a named folder in filepath e.g s87



#Command defines

def dopdf(canv, listoffiles, stra, strb, strc, title):
    canv.drawImage(listoffiles[0],20,(2*cheigh/3)-20,250,200,anchor='sw',anchorAtXY=True,showBoundary=False)
    canv.drawImage(listoffiles[1],(cwidt/2)+20,(2*cheigh/3)-20,250,200,anchor='sw',anchorAtXY=True,showBoundary=False)
    if len(listoffiles)>=3:
        canv.drawImage(listoffiles[2],20,(cheigh+15)/3,250,200,anchor='sw',anchorAtXY=True,showBoundary=False)
        if len(listoffiles)>=4:
            canv.drawImage(listoffiles[3],(cwidt/2)+20,(cheigh+15)/3,250,200,anchor='sw',anchorAtXY=True,showBoundary=False)
            if len(listoffiles)>=5:
                canv.drawImage(listoffiles[4],20,20,250,200,anchor='sw',anchorAtXY=True,showBoundary=False)
                if len(listoffiles)>=6:
                    canv.drawImage(listoffiles[5],(cwidt/2)+20,20,250,200,anchor='sw',anchorAtXY=True,showBoundary=False)
    canv.setFont('arial',14)
    canv.setFillColor((0,0,0)) #change the text color
    subtitle=input(strsubtitle)
    canv.drawCentredString(cwidt/2,(2*cheigh/3) +250, subtitle)
    canv.drawCentredString(cwidt/2,(2*cheigh/3) +230, stra)
    canv.drawCentredString(cwidt/2,(2*cheigh/3) +210, strb)
    canv.drawCentredString(cwidt/2,(2*cheigh/3) +190, strc)
    canv.setFont('arial',28)
    canv.drawString(20,cheigh+25, title)
    print ('generated a .pdf titled', file, title, ' report.pdf')
    canv.save()


def formattoseconds(x):
    list = []
    dots=[i for i, j in enumerate(x[0]) if j == ':']
    if dots != [2,5,8]:
        print('The first data point is in a format that is unrecognised - should be hh:mm:ss:mss',dots, 'should be 2,5,8. Returned [0]')
        return [0]
    for i in x:
        list.append(int(i[6:8]) + (3600*int(i[0:2])) + (60*int(i[3:5])) + (0.001 *int(i[9:])))
    print ('sorted x data from hh/mm/ss/ms into seconds')
    return sorted(list)

def interpolate(r1x,r1y,r2x,r2y,searchrange):
    r1yo = r1y[0:]
    r2yo = r2y[0:]
    if r1x[0]< r2x[0]:
        r2xstart = 0
        rzxo = r2x[0]
        for i in range(len(r1x)): # find the first number larger than r2x[1]  in the series r1x[]. Then, save its position in r1x[] to 'r1xstart'
            if r1x[i]>=rzxo:
                r1xstart = i
                print(r1xstart, r1x[i], '= r1xstart. 0= r2xstart')
                break
    else:
        r1xstart =0
        for i in range(len(r2x)): # find the first number larger than r2x[1]  in the series r1x[]. Then, save its position in r1x[] to 'r1xstart'
            if r2x[i]>=r1x[0]:
                r2xstart = i
                print(r2xstart, r2x[i], '= r2xstart. 0= r1xstart ')
                break
    if r1x[-1]>r2x[-1]: # if las value of r1x is biggest, take r2x up to its end 
        r2xend = len(r2x)
        r2xendoff= None
        maxrzx = max(r2x)
        for i in range(len(r1x)):
            if r1x[-(i+1)]<=maxrzx:
                r1xend = len(r1x)-i
                r1xendoff = -i
                print(r1xend, r1xendoff, 'r1xend')
                break  
    else: # if las value of r2x is biggest, take r1x up to its end 
        r1xend = len(r1x)
        r1xendoff = None
        maxrix = max(r1x)
        for i in range(len(r2x)):
            if r2x[-(i+1)]<=maxrix:
                r2xend = len(r2x)-i
                r2xendoff =-i
                print(r2xend, r2xendoff, 'r1xend')
                break
    lenrix =len(r1x)
    errorhandler =[]
    for i in range(r2xstart, r2xend):
        startrange = i-searchrange
        if startrange <0:
            startrange =0
        for j in range(startrange, lenrix): # for j in a search range 
            if r1x[j] >=r2x[i]: # finds the first value greater than r2x[i]
                r1yo.insert(   (-(lenrix-j) ),  r1y[(j-1)] + (   ( (r1y[j]-r1y[(j-1)])/(r1x[j]-r1x[(j-1)]) ) * (r2x[i]-r1x[(j-1)])    ) ) #adds interpolated value for r2x[i] to the list of y values
                if j==startrange:
                    errorhandler.append(r2x[i])
                break
    print ('finished interpolating r1y by r2x')
    lenrzx= len(r2x)
    for i in range(r1xstart, r1xend):
        startrange = i-searchrange
        if startrange <0:
            startrange =0
        for j in range(startrange, lenrzx): # for j in r1x from offset minus search range onwards
            if r2x[j] >=r1x[i]: # finds first value greater than r1xi
                r2yo.insert(-(lenrzx-j) ,  r2y[(j-1)] + (   ( (r2y[j]-r2y[(j-1)])/(r2x[j]-r2x[(j-1)]) ) * (r1x[i]-r2x[(j-1)])    ) ) #adds interpolated value to the list
                if j==startrange:
                    errorhandler.append(r2x[i])
                break
    print ('finished interpolating r2y by r1x')
    if errorhandler !=[]:
        print ('Please increase startrange and repeat the python executable.', len(errorhandler), ' values have been interpolated incorrectly.')
        print ('These timesteps were interpolated with values that were too high:', errorhandler, 'r1 vals listed first, then r2.')
    else:
        print ('No interpolation errors!')
    rxo = sorted(r1x[r1xstart:r1xend] + r2x[r2xstart:r2xend]) # this is the time step for both r1 and r2 combined
    r1yo= r1yo[r1xstart:r1xendoff]
    r2yo=r2yo[r2xstart:r2xendoff]
    print('Interpolated the x values. done!')
    return r1yo, r2yo, rxo



def plotandsave(titlestring,ystring,xstring,yv): # shows a plot and then saves it as a .png
    plt.title(titlestring)
    if yv is not False:
        plt.axis(ymin=yv)
    plt.ylabel(ystring) 			#defines labels for your graph. "D flux (N m⁻²s⁻ˡ)"
    plt.xlabel(xstring) 
    plt.rcParams.update({"savefig.facecolor":  ('white'),"figure.figsize": (7, 5)})  			#big nice pngs
    savestring = '/'.join([outputfolder, titlestring])
    plt.savefig(savestring, bbox_inches='tight') #this will throw a bunch of .png files into the folder specified in filepath, overwriting anything with the same name.
    plt.show()				#shows you the graph that was saved

def loadfilesmatching(namelist): # loads files and returns a list of them ordered by name alphabetically
    files = []
    for i in namelist:
        filefind = ''.join([filepath, i])
        files = files + sorted(glob.glob(filefind,recursive=True))
    print ('Began reading', files, len(files))
    return sorted(files)
    

    
# The Actual Script

###daq
daqfiles = loadfilesmatching(["daq*.csv", 'DAQ*.csv'])
for daqfile in daqfiles:
    daqdata = pd.read_csv(daqfile, header=daqheaderrow, usecols = [0]+daqYcolumns) # picks out the daq data only and discards the rest
    datavalues = [list(x) for x in zip(*daqdata.values)]
    datalabels = daqdata.columns
    daqydatanos = range(1,len(daqYcolumns)+1) # this is a list of numbers equivalent to the columns in daqdata that are actually y data
    print(datalabels)
    x = [i*daqtimestep for i in range(len(datavalues[0]))]
    for each in daqydatanos:
        y = datavalues[each]
        plt.plot(x, y, color =colours[each], linewidth = 1.5, alpha = 0.7)
    plt.legend(datalabels[daqydatanos[skipchannel:]])# can include ', bbox_to_anchor=(1, 1)' to make labels appear inside box
    titlefile =  os.path.basename(daqfile)
    titlestring = '.'.join([titlefile[:6],"Pressure in System" ,"png"])
    plotandsave(titlestring,"pressure/V", "Time/S",-8)

###diode
diodefiles = loadfilesmatching([diodefilename])
for count, diodefile in enumerate(diodefiles):
    diodedata = pd.read_csv(diodefile, sep=sp, header=diodeheaderrow)
    datavalues = [list(x) for x in zip(*diodedata.values)]
    datalabels = diodedata.columns
    print(datalabels)
    x = datavalues[diodeXcolumn]
    y = pd.Series(datavalues[diodeYcolumn]).rolling(window=smoothfactor).mean()
    plt.plot(x, y, color =colours[0], linewidth = 1.5, alpha = 0.7) #plt.legend(datalabels[diodeYcolumn])
    titlefile =  os.path.basename(diodefile)
    titlestring = '.'.join([titlefile[:6],"light output to diode", str(count+1),"png"])
    plotandsave(titlestring,"power/W","Time/MS",0)



###r1 and r2
r2files = loadfilesmatching(["R*2*.csv"])
r1files = loadfilesmatching(["R*1*.csv"])# DOES NOT CHECK THE FILES MATCH.
listoffilesr1 =[]
listoffilesr2=[]
meancurrentlist=[]
totalcoulomblist=[]
timelist =[]
for each in range(len(r1files)):
    r1file = os.path.basename(r1files[each])
    r2file = os.path.basename(r2files[each])
    r1data = pd.read_csv(r1files[each], header=rheaderrow)
    datavalues = [list(x) for x in zip(*r1data.values)]
    r1y = datavalues[rYcolumn]
    r1x = formattoseconds(datavalues[rXcolumn])
    r2data = pd.read_csv(r2files[each], header=rheaderrow) #using r1file for both, to conserve space in the ram lmaooo
    datavaluesii = [list(x) for x in zip(*r2data.values)]
    r2y = datavaluesii[rYcolumn]
    r2x = formattoseconds(datavaluesii[rXcolumn])
    (r1, r2, rx) = interpolate(r1x,r1y,r2x,r2y, searchrange)
    r1overr2=[]
    current=[]
    currentr2=[]
    currenthigh=[]
    timehigh=[]
    avgr1r2list=[]
    for eachh in range(len(rx)):
        if r2[eachh] == 0:
            r1overr2.append(0) # if it can't actually divide by r2, adds 0 instead.
        else:
            r1overr2.append(r1[eachh]/r2[eachh])
        current.append(r1[eachh]/resistorohms)
        currentr2.append(r2[eachh]/resistorohms)
        if r1[eachh]>=0.0001:
            timeval = rx[eachh+1]-rx[eachh]
            currenthigh.append(r1[eachh]*timeval)
            timehigh.append(timeval)
    timelist.append(sum(timehigh))
    totalcoulombs=(sum(currenthigh)*sampleareacm2)/(resistorohms*r1areacm2)
    totalcoulomblist.append(totalcoulombs)
    meancurrentlist.append(totalcoulombs/timelist[each])
    avgr1r2list.append(sum(r1overr2)/len(r1overr2))
    plt.plot(rx, r1, color =colours[1], linewidth = 1.5, alpha = 0.7)
    plt.plot(rx, r2, color =colours[2], linewidth = 1.5, alpha = 0.7)
    listoffilesr1.append(r1file[:6])
    listoffilesr2.append(r2file[:6])
    titlestring = '.'.join([listoffilesr1[each],"R1 vs R2","png"])
    plt.legend(['R1', 'R2'])
    plotandsave(titlestring,"power/W", "Time/S",False)
    plt.plot(r1overr2, r1, color =colours[7], linewidth = 1.5, alpha = 0.7)
    titlestring = '.'.join([listoffilesr1[each],"R1 ÷ R2 vs R1","png"])
    plotandsave(titlestring,"R1/R2", "R1",False)
    plt.plot(rx, current, color =colours[6], linewidth = 1.5, alpha = 0.7)
    titlestring = '.'.join([listoffilesr1[each],"R2 Current","png"])
    plotandsave(titlestring,"power/W", "Time/MS",False)
print (listoffilesr1)
    
if listoffilesr1!=listoffilesr2:
    print ('the files used for r1 and r2 do not seem to match', listoffilesr1, listoffilesr2)
if not len(daqfiles) == len(listoffilesr1) == len(diodefiles):
    print ('the number of files found for each folder don\'t appear to match. R1:', len(listoffilesr1), 'diodefiles:', len(diodefiles), 'daqfiles:', len(daqfiles) )

strtitle = ''.join(['write a title for the file', r1files[each], ', including sample no. and material. E.g S87, Eurofer'])
for each, file in enumerate(listoffilesr1):
    title=input(strtitle)
    strsubtitle = ''.join(['write subtitle for file', r1files[each], '. You may want to include the data on magnetron, anode, extractor, treatment temp. \nE.g 0.0 DPA, 5 hours, 40mA magnetron, 400V anode, -200V extractor, room temperature. \n You can copy paste this from Tricem\Documents\ElectronicLogs\ on the n drive'])
    filepath = ''.join([outputfolder, '/', file, '*' ])
    canvname = ''.join([outputfolder, '/!', file, title, ' report.pdf'])
    canv = Canvas(canvname,pagesize=A4)
    canv.drawImage(img, 280, cheigh, 280, 55,anchor='sw',anchorAtXY=True,showBoundary=False)
    listoffiles = sorted(glob.glob(filepath,recursive=True))
    seconds = timelist[each]
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    currentdate = datetime.datetime.now()
    stringlist = ['Total R1 Charge:', format(totalcoulomblist[each], '.2f'), 'C. Average R1 current:', str(meancurrentlist[each]), 'A', 'Average R1/R2:', format(avgr1r2list[each], '.2f'), ', Plasma Duration:', str(hours),'Hr',str(minutes),'min',format(seconds, '.2f'), 's, or ', format(timelist[each], '.2f'), 'seconds. Today\'s date:', str(currentdate)]
    stra = ' '.join(stringlist[:5])
    strb = ' '.join(stringlist[5:14])
    strc = ' '.join(stringlist[14:])
    print (stra, strb, strc)
    dopdf(canv, listoffiles, stra, strb, strc, title)
print ('"My work here is done." The python removes its sunglasses, revealing a pair of slightly smaller sunglasses, and exits the room.')

                       
                               
# Unused defines
noisebound = 10 # if the absolute value is less than the noise boundary, the data point is treated as noise

def findlowerboundofcurve(enumerateddata):
    #meancurrentlist[each]*(areacm2list[each]/r1areacm2)
    for each in enumerateddata:
        if (abs(enumerateddata[each])>=noisebound):
            if (each-previous)<10:
                lb.append(each)
                previous = each
                if len(lb)>5:
                    print (lb)
                    return lb
                    break
            else:
                sv=[each]
                previous = each
                
def findupperboundofcurve(enumerateddata, lowerstart):  
    for each in enumerateddata[lowerstart:]:
        if abs(enumerateddata[each])<=noisebound:
            if (each-previous)<10:
                ub.append(each)
                previous = each
                if len(ub)>5:
                    print (ub)
                    return ub
                    break
            else:
                ub=[each]
                previous = each
                
